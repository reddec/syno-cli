// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package client

import (
	"errors"
	"fmt"
)

const (
	// FileTypeUnknown is a FileType of type unknown.
	FileTypeUnknown FileType = ""
	// FileTypeAuto is a FileType of type auto.
	FileTypeAuto FileType = "auto"
	// FileTypeTorrent is a FileType of type torrent.
	FileTypeTorrent FileType = "torrent"
	// FileTypeNzb is a FileType of type nzb.
	FileTypeNzb FileType = "nzb"
	// FileTypeTxt is a FileType of type txt.
	FileTypeTxt FileType = "txt"
)

var ErrInvalidFileType = errors.New("not a valid FileType")

// FileTypeValues returns a list of the values for FileType
func FileTypeValues() []FileType {
	return []FileType{
		FileTypeUnknown,
		FileTypeAuto,
		FileTypeTorrent,
		FileTypeNzb,
		FileTypeTxt,
	}
}

// String implements the Stringer interface.
func (x FileType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x FileType) IsValid() bool {
	_, err := ParseFileType(string(x))
	return err == nil
}

var _FileTypeValue = map[string]FileType{
	"":        FileTypeUnknown,
	"auto":    FileTypeAuto,
	"torrent": FileTypeTorrent,
	"nzb":     FileTypeNzb,
	"txt":     FileTypeTxt,
}

// ParseFileType attempts to convert a string to a FileType.
func ParseFileType(name string) (FileType, error) {
	if x, ok := _FileTypeValue[name]; ok {
		return x, nil
	}
	return FileType(""), fmt.Errorf("%s is %w", name, ErrInvalidFileType)
}
